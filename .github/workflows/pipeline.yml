# .github/workflows/pipeline.yml
# ------------------------------------------------------------------
# CI / CD pipeline for the Aquila‑AI‑Stack repository
# ------------------------------------------------------------------

name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build_test_deploy:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────────
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-

    # ──────────────────────────────
    - name: Build all Compose images
      run: docker compose build --parallel

    # ──────────────────────────────
    # Unit / integration tests
    - name: Run data_collector test‑suite
      run: |
        # The --no-deps flag keeps the GitHub runner fast;
        # pytest is run at the repo root inside the service container
        docker compose run --rm --no-deps \
          data_collector \
          pytest -q

    # ──────────────────────────────
    - name: Security scan (placeholder)
      run: echo "Run security scans here (e.g. Trivy, Snyk, etc.)"

    # ──────────────────────────────
    - name: Build & push Docker images (optional)
      if: false   # remove or flip to `true` when ready
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
        docker compose build
        docker compose push

    # ──────────────────────────────
    - name: Terraform deploy (optional)
      if: false
      working-directory: infrastructure
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false

    # ──────────────────────────────
    - name: Helm deploy (optional)
      if: false
      run: |
        helm upgrade --install data-collector helm/data-collector
        helm upgrade --install ml-model       helm/ml-model
        helm upgrade --install fin-dash       helm/fin-dash
        helm upgrade --install sec-manager    helm/sec-manager